======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for Ximan Ding

Processing week 2

Your current Git repo size is about 133.49 KiB on disk

Found directories: .git, week1, week2, Feedback
Found files: .gitignore, README.md

Processing week 2: week2

Found 22 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: MyExampleScript.py

Contents:

**********
#MyExampleScript.py
def foo(x):
    """Print x squared (side effect)."""
    x *= x  # same as x = x * x
    print(x)

if __name__ == "__main__":
    foo(2)

**********

Output (first 500 chars):

**********
4

**********
No errors.
======================================================================
Script: lc2.py

Contents:

**********
# cfexercises2.py
# This is only the code file.
# All my understanding of these code below, with my prediction of how many hello will be printed, are shown in my week2 readme file. 
########################
def hello_1(x):
    for j in range(x):
        if j % 3 == 0:
            print('hello')
    print(' ')

hello_1(12)

########################
def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')

hello_2(12)

########################
def hello_3(x, y):
    for i in range(x, y):
        print('hello')
    print(' ')

hello_3(3, 17)

########################
def hello_4(x):
    while x != 15:
        print('hello')
        x = x + 3
    print(' ')

hello_4(0)

########################
def hello_5(x):
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1
    print(' ')

hello_5(12)

# WHILE loop with BREAK
def hello_6(x, y):
    while x: # while x is True
        print("hello! " + str(y))
        y += 1 # increment y by 1 
        if y == 6:
            break
    print(' ')

hello_6 (True, 0)
**********

Output (first 500 chars):

**********
hello
hello
hello
hello
 
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello! 0
hello! 1
hello! 2
hello! 3
hello! 4
hello! 5
 

**********
No errors.
======================================================================
Script: oaks.py

Contents:

**********
## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********

Output (first 500 chars):

**********
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}

**********
No errors.
======================================================================
Script: dictionary.py

Contents:

**********
# dictionary.py
# Only code in this document, all understanding of the code are in readme file.
GenomeSize = {'Homo sapiens': 3200.0, 'Escherichia coli': 4.6, 'Arabidopsis thaliana': 157.0}
print(GenomeSize)

print(GenomeSize['Arabidopsis thaliana'])

GenomeSize['Saccharomyces cerevisiae'] = 12.1
print(GenomeSize)

GenomeSize['Escherichia coli'] = 4.6 
print(GenomeSize)

GenomeSize['Homo sapiens'] = 3201.1
print(GenomeSize)

# Define a dictionary with duplicate keys
my_dict = {'a': 1, 'b': 2, 'a': 3}

# Print the dictionary
print(my_dict)
**********

Output (first 500 chars):

**********
{'Homo sapiens': 3200.0, 'Escherichia coli': 4.6, 'Arabidopsis thaliana': 157.0}
157.0
{'Homo sapiens': 3200.0, 'Escherichia coli': 4.6, 'Arabidopsis thaliana': 157.0, 'Saccharomyces cerevisiae': 12.1}
{'Homo sapiens': 3200.0, 'Escherichia coli': 4.6, 'Arabidopsis thaliana': 157.0, 'Saccharomyces cerevisiae': 12.1}
{'Homo sapiens': 3201.1, 'Escherichia coli': 4.6, 'Arabidopsis thaliana': 157.0, 'Saccharomyces cerevisiae': 12.1}
{'a': 3, 'b': 2}

**********
No errors.
======================================================================
Script: cfexercises2.py

Contents:

**********
# cfexercises2.py
# This is only the code file.
# All my understanding of these code below, with my prediction of how many hello will be printed, are shown in my week2 readme file. 
########################
def hello_1(x):
    for j in range(x):
        if j % 3 == 0:
            print('hello')
    print(' ')

hello_1(12)

########################
def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')

hello_2(12)

########################
def hello_3(x, y):
    for i in range(x, y):
        print('hello')
    print(' ')

hello_3(3, 17)

########################
def hello_4(x):
    while x != 15:
        print('hello')
        x = x + 3
    print(' ')

hello_4(0)

########################
def hello_5(x):
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1
    print(' ')

hello_5(12)

# WHILE loop with BREAK
def hello_6(x, y):
    while x: # while x is True
        print("hello! " + str(y))
        y += 1 # increment y by 1 
        if y == 6:
            break
    print(' ')

hello_6 (True, 0)
**********

Output (first 500 chars):

**********
hello
hello
hello
hello
 
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello! 0
hello! 1
hello! 2
hello! 3
hello! 4
hello! 5
 

**********
No errors.
======================================================================
Script: using_name.py

Contents:

**********
#!/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('This program is being run by itself!')
else:
    print('I am being imported from another script/program/module!')

print("This module's name is: " + __name__)
**********

Output (first 500 chars):

**********
This program is being run by itself!
This module's name is: __main__

**********
No errors.
======================================================================
Script: basic_io3.py

Contents:

**********
#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)

**********

Output (first 500 chars):

**********
{'a key': 10, 'another key': 11}

**********
No errors.
======================================================================
Script: basic_io1.py

Contents:

**********
#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

**********

Output (first 500 chars):

**********
First Line

Second Line



Third Line



Fourth Line
First Line

Second Line

Third Line

Fourth Line

**********
No errors.
======================================================================
Script: cfexercises1.py

Contents:

**********
# This is only the ocde file.
# All my understanding of these code below are shown in my week2 readme file. 
# cfexercises1.py
def foo_1(x):
    return x ** 0.5

def foo_2(x, y):
    if x > y:
        return x
    return y

def foo_3(x, y, z):
    if x > y:
        x, y = y, x
    if x > z:
        x, z = z, x
    if y > z:
        y, z = z, y
    return [x, y, z]

def foo_4(x):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x): # a recursive function that calculates the factorial of x
    if x ==0 or x == 1:
        return 1
    return x * foo_5(x - 1)
     
def foo_6(x): # Calculate the factorial of x in a different way; no if statement involved
    facto = 1
    if x == o:
        return 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto
**********

Output (first 500 chars):

**********

**********
No errors.
======================================================================
Script: debugme.py

Contents:

**********
def buggyfunc(x):
    y = x
    for i in range(x):
        y = y-1
        z = x/y
    return z

buggyfunc(20)
**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/XimanDing_xd1025/week2/code/debugme.py", line 8, in <module>
    buggyfunc(20)
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/XimanDing_xd1025/week2/code/debugme.py", line 5, in buggyfunc
    z = x/y
        ~^~
ZeroDivisionError: division by zero

**********
======================================================================
Script: boilerplate.py

Contents:

**********
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Your Name (your@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)
**********

Output (first 500 chars):

**********
This is a boilerplate

**********
No errors.
======================================================================
Script: basic_io2.py

Contents:

**********
#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()
**********

Output (first 500 chars):

**********

**********
No errors.
======================================================================
Script: control_flow_lc1.py

Contents:

**********
# This is only the ocde file.
# All my understanding of these code below are shown in my week2 readme file. 
# cfexercises1.py
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Ximan Ding (x.ding25@imperial.ac.uk)'
__version__ = '0.0.1'

def foo_1(x):
    return x ** 0.5

def foo_2(x, y):
    if x > y:
        return x
    return y

def foo_3(x, y, z):
    if x > y:
        x, y = y, x
    if x > z:
        x, z = z, x
    if y > z:
        y, z = z, y
    return [x, y, z]

def foo_4(x):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x): # a recursive function that calculates the factorial of x
    if x ==0 or x == 1:
        return 1
    return x * foo_5(x - 1)
     
def foo_6(x): # Calculate the factorial of x in a different way; no if statement involved
    facto = 1
    if x == 0:
        return 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

# like the program-with-control-flows example in the book, in the book they copy and rename boilerplate.py to control_flow.py
# here I will use the same way to test my functions in lc1.py
if __name__ == "__main__":
    try:
        n = int(input("Enter a non-negative integer n for tests (e.g., 5): "))
        if n < 0:
            raise ValueError("n must be non-negative")
    except Exception as e:
        print(f"[Input error] {e}. Using default n = 5")
        n = 5

    print(f"foo_1({n}) =", foo_1(n))
    print(f"foo_2({n}, 7) =", foo_2(n, 7))
    print(f"foo_3({n}, 2, 9) =", foo_3(n, 2, 9))
    print(f"foo_4({n}) =", foo_4(n))
    print(f"foo_5({n}) =", foo_5(n))
    print(f"foo_6({n}) =", foo_6(n))
        # Additional tests
    print("\n[Extra tests]")
    print("foo_5(10) =", foo_5(10))
    print("foo_6(10) =", foo_6(10))

**********

Output (first 500 chars):

**********
Enter a non-negative integer n for tests (e.g., 5): [Input error] EOF when reading a line. Using default n = 5
foo_1(5) = 2.23606797749979
foo_2(5, 7) = 7
foo_3(5, 2, 9) = [2, 5, 9]
foo_4(5) = 120
foo_5(5) = 120
foo_6(5) = 120

[Extra tests]
foo_5(10) = 3628800
foo_6(10) = 3628800

**********
No errors.
======================================================================
Script: control_flow.py

Contents:

**********
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Your Name (your@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)

#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return f"{x} is Even!"
    return f"{x} is Odd!"

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return f"No divisor found for {x}!" # Each function can return a value or a variable.
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor") 
            return False
    print(f"{x} is a prime!")
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes
      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********

Output (first 500 chars):

**********
This is a boilerplate

**********
No errors.
======================================================================
Script: lc1.py

Contents:

**********
# This is only the ocde file.
# All my understanding of these code below are shown in my week2 readme file. 
# cfexercises1.py
def foo_1(x):
    return x ** 0.5

def foo_2(x, y):
    if x > y:
        return x
    return y

def foo_3(x, y, z):
    if x > y:
        x, y = y, x
    if x > z:
        x, z = z, x
    if y > z:
        y, z = z, y
    return [x, y, z]

def foo_4(x):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x): # a recursive function that calculates the factorial of x
    if x ==0 or x == 1:
        return 1
    return x * foo_5(x - 1)
     
def foo_6(x): # Calculate the factorial of x in a different way; no if statement involved
    facto = 1
    if x == 0:
        return 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto
**********

Output (first 500 chars):

**********

**********
No errors.
======================================================================
Script: test_control_flow_lc1.py

Contents:

**********
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""

__author__ = 'Ximan Ding (x.ding25@imperial.ac.uk)'
__version__ = '0.0.1'

import sys
import doctest  # Import the doctest module


def even_or_odd(x=0):
    """Find whether a number x is even or odd.
      
    >>> even_or_odd(10)
    '10 is Even!'
    
    >>> even_or_odd(5)
    '5 is Odd!'
        
    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'
    """
    # Define function to be tested
    if x % 2 == 0:
        return f"{x} is Even!"
    return f"{x} is Odd!"


def main(argv):
    """Main function to demonstrate function output"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0


if __name__ == "__main__":
    status = main(sys.argv)

# Run the doctest embedded in the docstring
doctest.testmod()
**********

Output (first 500 chars):

**********
22 is Even!
33 is Odd!

**********
No errors.
======================================================================
Script: sysargv.py

Contents:

**********
#sysargv.py
#!/usr/bin/env python3

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))

**********

Output (first 500 chars):

**********
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********
No errors.
======================================================================
Script: oaks_debugme.py

Contents:

**********
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import csv
import sys
import re
from typing import Iterable

def _levenshtein_dist(a: str, b: str) -> int:
    la, lb = len(a), len(b)
    dp = list(range(lb + 1))
    for i in range(1, la + 1):
        prev, dp[0] = dp[0], i
        for j in range(1, lb + 1):
            cur = dp[j]
            cost = 0 if a[i - 1] == b[j - 1] else 1
            dp[j] = min(
                dp[j] + 1,        # deletion
                dp[j - 1] + 1,    # insertion
                prev + cost       # substitution
            )
            prev = cur
    return dp[lb]

def _first_alpha_token(name: str) -> str:
    
    # Keep only letters and separators as spaces, then split
    cleaned = re.sub(r"[^A-Za-z]+", " ", name).strip()
    return cleaned.split()[0] if cleaned else ""

def is_an_oak(name: str) -> bool:
    """
    Return True if the input belongs to genus Quercus (oak).
    Robust to common typos such as 'Quercuss' (one extra 's') and to
    case/whitespace/punctuation noise.

    The logic:
      - Take the first alphabetic token as the genus candidate.
      - Exact match 'quercus' => True
      - Otherwise, allow Levenshtein distance <= 1 to 'quercus'.

    >>> is_an_oak('Quercus robur')
    True
    >>> is_an_oak('quercus petraea')
    True
    >>> is_an_oak(' Quercuss  cerris ')
    True
    >>> is_an_oak('Fagus sylvatica')
    False
    >>> is_an_oak('Pinus')
    False
    >>> is_an_oak('Quercus')
    True
    >>> is_an_oak("Q. robur")  # not strictly the full genus, should be False here
    False
    >>> is_an_oak("Quercu")    # missing 's' => distance 1 -> True by our tolerant rule
    True
    """
    token = _first_alpha_token(name).lower()
    if not token:
        return False
    if token == "quercus":
        return True
    # allow one edit away (handles 'quercuss', 'quercu', 'quer cus' etc.)
    return _levenshtein_dist(token, "quercus") <= 1

def filter_oaks(rows: Iterable[Iterable[str]]) -> Iterable[tuple[str, str]]:
 
    for row in rows:
        if not row:
            continue
        genus = row[0].strip()
        if genus.lower() == "genus":
            # header row
            continue
        species = row[1].strip() if len(row) > 1 else ""
        if is_an_oak(genus):
            yield (genus, species)

def main(argv):
    in_path = "../data/TestOaksData.csv"
    out_path = "../data/JustOaksData.csv"  

    with open(in_path, "r", newline="", encoding="utf-8") as f, \
         open(out_path, "w", newline="", encoding="utf-8") as g:
        reader = csv.reader(f)
        writer = csv.writer(g)

        for row in reader:
            # Optional: print for debugging
            # print(row)
            # print("The genus is:", row[0] if row else "")
            for genus, species in filter_oaks([row]):
                # Found an oak
                # print("FOUND AN OAK!")
                writer.writerow([genus, species])

    return 0

if __name__ == "__main__":
    # To run doctests:  python3 -m doctest -v oaks_debugme.py
    sys.exit(main(sys.argv))
**********

Output (first 500 chars):

**********

**********
No errors.
======================================================================
Script: tuple.py

Contents:

**********
# tuple.py
# Only code in here, understanding of the code are in readme file.
MyTuple = ("a", "b", "c")
print(MyTuple)

print(type(MyTuple))

MyTuple[0]
print(len(MyTuple))

FoodWeb=[('a','b'),('a','c'),('b','c'),('c','c')]
print(FoodWeb)

print(FoodWeb[0])

print(FoodWeb[0][0])

FoodWeb[0] = ("bbb","ccc") 

a = (1, 2, []) 
print(a)

a[2].append(1000)
print(a)

a[2].append(1000)
print(a)

a[2].append((100,10))
print(a)

a = (1, 2, 3)

b = a + (4, 5, 6)
print(b)

c = b[1:]
print(c)

b = b[1:]
print(b)

a = ("1", 2, True)
print(a)

**********

Output (first 500 chars):

**********
('a', 'b', 'c')
<class 'tuple'>
3
[('a', 'b'), ('a', 'c'), ('b', 'c'), ('c', 'c')]
('a', 'b')
a
(1, 2, [])
(1, 2, [1000])
(1, 2, [1000, 1000])
(1, 2, [1000, 1000, (100, 10)])
(1, 2, 3, 4, 5, 6)
(2, 3, 4, 5, 6)
(2, 3, 4, 5, 6)
('1', 2, True)

**********
No errors.
======================================================================
Script: loops.py

Contents:

**********
# FOR loops
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loop
z = 0
while z < 100:
    z = z + 1
    print(z)
**********

Output (first 500 chars):

**********
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********
No errors.
======================================================================
Script: basic_csv.py

Contents:

**********
import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open('../data/testcsv.csv','r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv','r') as f:
    with open('../data/bodymass.csv','w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])

**********

Output (first 500 chars):

**********
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Panthera leo', 'Feliformia', 'Felidae', 'Africa', '190']
The species is Panthera leo
['Panthera tigris', 'Feliformia', 'Felidae', 'Asia', '220']
The species is Panthera tigris
['Canis lupus', 'Caniformia', 'Canidae', 'Northern Hemisphere', '45']
The species is Canis lupus
['Ursus arctos', 'Caniformia', 'Ursidae', 'Northern Hemisphere', '270']
The species is Ursus arctos
['Species', 'Infraorder', '
**********
No errors.
======================================================================
Script: align_seqs.py

Contents:

**********
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# align_seqs.py
from __future__ import annotations
from pathlib import Path
import csv
import re
import sys
from typing import Tuple, Optional

# Allowed DNA bases (A, C, G, T, case-insensitive)
_VALID_DNA = re.compile(r"^[ACGTacgt]+$")


def read_two_sequences(csv_path: Path) -> Tuple[str, str]:
    if not csv_path.exists():
        raise FileNotFoundError(f"Input file not found: {csv_path}")

    raw = csv_path.read_text(encoding="utf-8", errors="ignore")
    raw = raw.replace("\r\n", "\n").replace("\r", "\n").lstrip("\ufeff")

    tokens: list[str] = []

    # Try CSV parsing first
    from io import StringIO
    f = StringIO(raw)
    reader = csv.reader(f)
    for row in reader:
        for cell in row:
            cell = cell.strip().strip('"').strip("'")
            if cell:
                tokens.append(cell)

    # If nothing was found, split more loosely
    if not tokens:
        for line in raw.split("\n"):
            for cell in re.split(r"[,\t; ]+", line.strip()):
                if cell:
                    tokens.append(cell)

    def looks_like_dna(s: str) -> bool:
        return bool(re.fullmatch(r"[ACGTacgt]+", s))

    seqs = [t.upper() for t in tokens if looks_like_dna(t)]

    # Fallback: global regex extraction if still less than 2 sequences
    if len(seqs) < 2:
        seqs = re.findall(r"[ACGT]+", raw.upper())

    if len(seqs) < 2:
        raise ValueError("Could not find two valid DNA sequences in the input file.")

    return seqs[0], seqs[1]


def _looks_like_dna(s: str) -> bool:
    return bool(_VALID_DNA.match(s.replace(" ", "")))

def choose_long_short(a: str, b: str) -> Tuple[str, str]:
    # Return (longer, shorter)
    return (a, b) if len(a) >= len(b) else (b, a)


def calculate_score(s1: str, s2: str, start: int) -> Tuple[int, str]:
    l1, l2 = len(s1), len(s2)
    score = 0
    matched_marks = []

    # Uncomment for debugging:
    # import ipdb; ipdb.set_trace()

    for i in range(l2):
        j = i + start
        if j >= l1:
            break
        if s1[j] == s2[i]:
            score += 1
            matched_marks.append("*")
        else:
            matched_marks.append("-")

    return score, "".join(matched_marks)



def find_best_alignment(seq1: str, seq2: str) -> Tuple[str, str, int, int]:

    s1, s2 = choose_long_short(seq1, seq2)
    l1 = len(s1)

    best_score = -1
    best_align = ""
    best_start = 0

    for start in range(l1):
        score, _ = calculate_score(s1, s2, start)
        if score > best_score:
            best_score = score
            best_align = "." * start + s2
            best_start = start

    return best_align, s1, best_score, best_start


def write_report(out_path: Path, aligned_s2: str, s1: str, score: int, start: int) -> None:
    # Save the best alignment and score to a text file.
    out_path.parent.mkdir(parents=True, exist_ok=True)
    content = [
        "# Best overlap alignment\n",
        f"Start position: {start}\n",
        f"Score (matches): {score}\n",
        "\n",
        aligned_s2 + "\n",
        s1 + "\n",
        "\n",
        "# Legend: '.' = offset, '*' = match, '-' = mismatch (debug view)\n",
    ]
    out_path.write_text("".join(content), encoding="utf-8")



def main(in_file: Optional[str] = None, out_file: Optional[str] = None) -> int:
    here = Path(__file__).resolve().parent
    default_in = (here / "../data/align_seqs.csv").resolve()
    default_out = (here / "../results/best_alignment.txt").resolve()

    in_path = Path(in_file) if in_file else default_in
    out_path = Path(out_file) if out_file else default_out

    seq1, seq2 = read_two_sequences(in_path)
    aligned_s2, s1, best_score, best_start = find_best_alignment(seq1, seq2)
    write_report(out_path, aligned_s2, s1, best_score, best_start)

    # Print summary to terminal
    print(f"Input:  {in_path}")
    print(f"Output: {out_path}")
    print("Alignment:")
    print(aligned_s2)
    print(s1)
    print(f"Best score: {best_score} (start={best_start})")
    return 0


if __name__ == "__main__":

    args = sys.argv[1:]
    in_arg = args[0] if len(args) >= 1 else None
    out_arg = args[1] if len(args) >= 2 else None
    sys.exit(main(in_arg, out_arg))

**********

Output (first 500 chars):

**********
Input:  /home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/XimanDing_xd1025/week2/data/align_seqs.csv
Output: /home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/XimanDing_xd1025/week2/results/best_alignment.txt
Alignment:
CAATTCGGAT
ATCGCCGGATTACGGG
Best score: 5 (start=0)

**********
No errors.

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 22
Scripts successful: 21
Scripts with errors: 1
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!


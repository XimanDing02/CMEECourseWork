======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for Ximan Ding

Processing week 1

Your current Git repo size is about 133.49 KiB on disk

Found directories: .git, week1, week2, Feedback
Found files: .gitignore, README.md

Processing week 1: week1

Found 8 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: csvtospace.sh

Contents:

**********
#!/bin/sh
# Author:  Ximan Ding<x.ding25@imperial.ac.uk>
# Script: csvtospace.sh
# Desc: Convert a comma-separated file to a space-separated file.
#       Does NOT modify the input; writes alongside it as <basename>.space
# Usage: bash csvtospace.sh <csv_file>
# Date: Oct 2025

set -u

usage() { echo "Usage: bash $0 <csv_file>"; exit 1; }

[ $# -eq 1 ] || usage

in="$1"
[ -f "$in" ] || { echo "Error: '$in' not found or not a regular file."; exit 2; }

dir=$(dirname "$in")
base=$(basename "$in")
name="${base%.*}"
out="$dir/$name.space"

if [ -e "$out" ]; then
  echo "Error: output '$out' already exists. Refusing to overwrite."
  exit 3
fi

echo "Converting commas to spaces: $in -> $out"
tr ',' ' ' < "$in" | tr -s ' ' > "$out" || { echo "Conversion failed."; exit 4; }

echo "Done: $out"

**********

Output (first 500 chars):

**********
Usage: bash csvtospace.sh <csv_file>

**********
No errors.
======================================================================
Script: CompileLaTeX.sh

Contents:

**********
#!/bin/bash
pdflatex $1.tex
bibtex $1
pdflatex $1.tex
pdflatex $1.tex
evince $1.pdf &

## Cleanup
rm *.aux
rm *.log
rm *.bbl
rm *.blg

**********

Output (first 500 chars):

**********
This is pdfTeX, Version 3.141592653-2.6-1.40.25 (TeX Live 2023/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(/usr/share/texlive/texmf-dist/tex/latex/tools/.tex
LaTeX2e <2023-11-01> patch level 1
L3 programming layer <2024-01-22>
File ignored)
*
! Emergency stop.
<*> 
    
!  ==> Fatal error occurred, no output PDF file produced!
Transcript written on .log.
This is pdfTeX, Version 3.141592653-2.6-1.40.25 (TeX Live 2023/Debian) (preloaded format=pdflatex
**********
Errors:
**********
bibtex: Need exactly one file argument.
Try `bibtex --help' for more information.
rm: cannot remove '*.aux': No such file or directory
rm: cannot remove '*.log': No such file or directory
rm: cannot remove '*.bbl': No such file or directory
rm: cannot remove '*.blg': No such file or directory
Cannot parse arguments: Cannot open display: 

**********
======================================================================
Script: tiff2png.sh

Contents:

**********
#!/bin/bash

for f in *.tif; 
    do  
        echo "Converting $f"; 
        convert "$f"  "$(basename "$f" .tif).png"; 
    done

**********

Output (first 500 chars):

**********
Converting *.tif

**********
Errors:
**********
convert-im6.q16: unable to open image `*.tif': No such file or directory @ error/blob.c/OpenBlob/2964.
convert-im6.q16: no images defined `*.png' @ error/convert.c/ConvertImageCommand/3234.

**********
======================================================================
Script: boilerplate.sh

Contents:

**********
#!/bin/sh
# Author: x.ding25@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2025

echo -e "\nThis is a shell script! \n"

#exit

**********

Output (first 500 chars):

**********

This is a shell script! 


**********
No errors.
======================================================================
Script: ConcatenateTwoFiles.sh

Contents:

**********
#!/bin/bash

cat $1 > $3
cat $2 >> $3
echo "Merged File is"
cat $3

**********

Output (first 500 chars):

**********
Merged File is

**********
Errors:
**********
ConcatenateTwoFiles.sh: line 3: $3: ambiguous redirect
ConcatenateTwoFiles.sh: line 4: $3: ambiguous redirect

**********
======================================================================
Script: tabtocsv.sh

Contents:

**********
#!/bin/sh
# Author: Your name you.login@imperial.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2019

echo "Creating a comma delimited version of $1 ..."
cat $1 | tr -s "\t" "," >> $1.csv
echo "Done!"
exit

**********

Output (first 500 chars):

**********
Creating a comma delimited version of  ...
Done!

**********
No errors.
======================================================================
Script: variables.sh

Contents:

**********
#!/bin/sh

## Illustrates the use of variables 

# Special variables

echo "This script was called with $# parameters"
echo "The script's name is $0"
echo "The arguments are $@"
echo "The first argument is $1"
echo "The second argument is $2"

# Assigned Variables; Explicit declaration:
MY_VAR='some string' 
echo 'the current value of the variable is:' $MY_VAR
echo
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

## Assigned Variables; Reading (multiple values) from user input:
echo 'Enter two numbers separated by space(s)'
read a b
echo
echo 'you entered' $a 'and' $b '; Their sum is:'

## Assigned Variables; Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM


**********

Output (first 500 chars):

**********
This script was called with 0 parameters
The script's name is variables.sh
The arguments are 
The first argument is 
The second argument is 
the current value of the variable is: some string

Please enter a new string

the current value of the variable is:

Enter two numbers separated by space(s)

you entered and ; Their sum is:


**********
Errors:
**********
expr: syntax error: missing argument after ‘+’

**********
======================================================================
Script: CountLines.sh

Contents:

**********
#!/bin/bash

NumLines=`wc -l < $1`
echo "The file $1 has $NumLines lines"
echo

**********

Output (first 500 chars):

**********
The file  has  lines


**********
Errors:
**********
CountLines.sh: line 3: $1: ambiguous redirect

**********

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 11
Scripts successful: 6
Scripts with errors: 5
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

